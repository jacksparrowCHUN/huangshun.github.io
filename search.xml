<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在windows10中安装并配置git</title>
    <url>/2019/10/16/two/</url>
    <content><![CDATA[<h3 id="在机器上部署git-创建版本库"><a href="#在机器上部署git-创建版本库" class="headerlink" title="在机器上部署git / 创建版本库"></a>在机器上部署git / 创建版本库</h3><p>建立ssh链接<br>配置本地储存库<br>1、新建本地存储   可以是(空/非空)文件夹, 在文件夹内执行命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></p>
<h3 id="新建本储存库"><a href="#新建本储存库" class="headerlink" title="新建本储存库"></a>新建本储存库</h3><p>2、在git 上新建仓库 ,<br>3、把本地存储库与git 的线上仓库关联    关联命令会在github上显示<br>把文件添加到版本库  </p>
<h3 id="再把文件-添加到版本库时-我们要先了解-git-本地仓库的结构"><a href="#再把文件-添加到版本库时-我们要先了解-git-本地仓库的结构" class="headerlink" title="再把文件 添加到版本库时 我们要先了解 git 本地仓库的结构:"></a>再把文件 添加到版本库时 我们要先了解 git 本地仓库的结构:</h3><p><img src="/2019/10/16/two/clipboard.png" alt="工作流"></p>
<h5 id="本地仓库由git-维护的三棵”树”组成"><a href="#本地仓库由git-维护的三棵”树”组成" class="headerlink" title="本地仓库由git 维护的三棵”树”组成"></a>本地仓库由git 维护的三棵”树”组成</h5><h5 id="第一个-你的工作目录-他持有实际文件"><a href="#第一个-你的工作目录-他持有实际文件" class="headerlink" title="第一个 你的工作目录   他持有实际文件"></a>第一个 你的工作目录   他持有实际文件</h5><h5 id="第二个是缓存区-index-缓存区域-保存临时保存你的改动"><a href="#第二个是缓存区-index-缓存区域-保存临时保存你的改动" class="headerlink" title="第二个是缓存区 (index) , 缓存区域 保存临时保存你的改动"></a>第二个是缓存区 (index) , 缓存区域 保存临时保存你的改动</h5><h5 id="最后一个是-HEAD-指向你最近提交后的结果"><a href="#最后一个是-HEAD-指向你最近提交后的结果" class="headerlink" title="最后一个是 HEAD , 指向你最近提交后的结果"></a>最后一个是 HEAD , 指向你最近提交后的结果</h5><h2 id="上传本地编辑文件至github"><a href="#上传本地编辑文件至github" class="headerlink" title="上传本地编辑文件至github"></a>上传本地编辑文件至github</h2><h5 id="提交远端仓库-github-线上仓库-master为仓库分支名称-你可以把master-换成任何你想要的推送的分支"><a href="#提交远端仓库-github-线上仓库-master为仓库分支名称-你可以把master-换成任何你想要的推送的分支" class="headerlink" title="提交远端仓库(github 线上仓库) master为仓库分支名称,你可以把master 换成任何你想要的推送的分支"></a>提交远端仓库(github 线上仓库) master为仓库分支名称,你可以把master 换成任何你想要的推送的分支</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi xxxx.txt                <span class="comment">#新建一个文件 写入一些内容 </span></span><br><span class="line">git add xxxx.txt           <span class="comment">#使用 命令 确认文件路径 (把文件添加到缓存区) (在index)</span></span><br><span class="line">git commit -m <span class="string">"备注信息"</span>    <span class="comment">#提交实际改动</span></span><br><span class="line">git push origgin (master)  <span class="comment">#提交更新github线上仓库的文件内容,master:仓库分支名称</span></span><br></pre></td></tr></table></figure>
<h4 id="git分支的概念"><a href="#git分支的概念" class="headerlink" title="git分支的概念:"></a>git分支的概念:</h4><p><img src="/2019/10/16/two/分支.png" alt>分支是用来将特性开发绝缘开来的. 在创建仓库的时候,  master 是”默认的” (主分支?)  在分支上进行开发,完成后再将他们合并到主分支.</p>
<h3 id="分支的创建与删除"><a href="#分支的创建与删除" class="headerlink" title="分支的创建与删除"></a>分支的创建与删除</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b feature_x   <span class="comment"># 创建一个叫做"feature_x"的分支并切换过去</span></span><br><span class="line">git checkout master  <span class="comment"># 切换回主分支</span></span><br><span class="line">git branch -d feature_x <span class="comment"># 删除新建的分支"feature_x"</span></span><br></pre></td></tr></table></figure>
<p>如果不执行推送到远程仓库的命令,新建的仓库分支是不会在远程仓库显示的.</p>
<h2 id="更新与合并"><a href="#更新与合并" class="headerlink" title="更新与合并"></a>更新与合并</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git pull                  <span class="comment">#更新本地仓库至最新改动,获取并合并远端的改动</span></span><br><span class="line">git merge &lt;分支/branch&gt;   <span class="comment">#要合并其他分支到当前分支</span></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"><span class="comment">####注意:两种情况下git都会尝试区自动合改动。不过，自动合并并非此次都能成功，</span></span><br><span class="line"><span class="comment">####并且还可能导致冲突。这个时候后就需要个人修改这些文件来人力合并这些冲突了。</span></span><br><span class="line"><span class="comment">####更改完成后,你需要执行以下命令.</span></span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">git add &lt;filename/文件名&gt;   <span class="comment">#将合并完成的文件标级为合并成功   </span></span><br><span class="line">git diff &lt;source_branch 源分支&gt;&lt;target_branch 目标分支&gt;  <span class="comment">#  在合并改动之前,查看我们的分支情况</span></span><br></pre></td></tr></table></figure>
<h3 id="在软件发布时创建标签"><a href="#在软件发布时创建标签" class="headerlink" title="在软件发布时创建标签"></a>在软件发布时创建标签</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag 1.0.0 1b2e1d63ff <span class="comment">#是你想要标记的提交ID的前10位字符</span></span><br><span class="line">git <span class="built_in">log</span> <span class="comment">#获取提交ID, 保证ID唯一</span></span><br></pre></td></tr></table></figure>
<h3 id="替换本地改动"><a href="#替换本地改动" class="headerlink" title="替换本地改动"></a>替换本地改动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout --&lt;filename/命令&gt; <span class="comment">#此命令会使用HEAD中的最新内容替换工作目录,已添加到缓存区的改动，以及新文件，都不受影响。</span></span><br><span class="line">git fetch origin      <span class="comment">#假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它</span></span><br><span class="line">git reset --head origin/master</span><br></pre></td></tr></table></figure>
<h4 id="内建的图形化界面"><a href="#内建的图形化界面" class="headerlink" title="内建的图形化界面"></a>内建的图形化界面</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gitk  <span class="comment">#打开一个图形话页面,展示项目发布过的数据</span></span><br></pre></td></tr></table></figure>
<h4 id="使git-输出彩色信息"><a href="#使git-输出彩色信息" class="headerlink" title="使git 输出彩色信息"></a>使git 输出彩色信息</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config color.ui <span class="literal">true</span>  <span class="comment">#彩色输出信息, windows中git 不会显示彩色输出项.</span></span><br></pre></td></tr></table></figure>
<p>windows中设置彩色输出:<br>卸载适用于Windows 10的Git Bash并再次运行安装程序：<br>    单击下一步，直到您提示选择配置终端仿真器以与Git<br>    Bash一起使用，在此处选择使用Windows默认控制台窗口（而不是使用MinTTY作为终端仿真器的默认选项）<br>    单击“下一步”完成安装<br>测试它是否正常工作：<br>    打开Git Bash（cmd会打开），尝试使用ls你会看到所有蓝色的文件夹<br>尝试一些ANSI转义码，运行ls 命令 你将使用蓝色背景的文本Test，如下面的屏幕截图所示<br><img src="/2019/10/16/two/截图.png" alt> Windows 10控制台支持24位颜色和ANSI转义序列</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>博客创建</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2019/10/14/mingcheng/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>技术 名称</tag>
      </tags>
  </entry>
  <entry>
    <title>你好世界</title>
    <url>/2019/10/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
